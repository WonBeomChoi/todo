{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","Todolist.js","todo.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","Todolist","props","react_default","a","createElement","list","map","itme","index","key","title","todo","state","id","text","checkTodo","event","console","log","_this","Object","toConsumableArray","push","setState","preventDefault","handleChange","target","value","this","onSubmit","type","onChange","src_Todolist","ReactDOM","render","todo_todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCItBC,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECHSC,EAbC,SAACC,GACb,OACIC,EAAAC,EAAAC,cAAA,UAEQH,EAAMI,KAAKC,IAAI,SAACC,EAAKC,GACjB,OACIN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GAAQD,EAAKG,WCLzBC,6MACjBC,MAAQ,CACJP,KAAM,CACF,CACAQ,GAAI,EACJH,MAAQ,gBAEZ,CACIG,GAAI,EACJH,MAAQ,kBAGhBI,KAAK,MAELC,UAAY,SAACC,GACTC,QAAQC,IAAI,OACZ,IAAMJ,EAAOK,EAAKP,MAAME,KAClBT,EAAIe,OAAAC,EAAA,EAAAD,CAASD,EAAKP,MAAMP,MAC9BA,EAAKiB,KAAK,CACNT,GAAG,EACHH,MAAMI,IAEVK,EAAKI,SAAS,CAAClB,KAAOA,IACtBW,EAAMQ,oBAEVC,aAAe,SAACT,GACZG,EAAKI,SAAS,CAACT,KAAOE,EAAMU,OAAOC,QACnCV,QAAQC,IAAIF,EAAMU,OAAOC,gFAG7B,OACEzB,EAAAC,EAAAC,cAAA,WACCwB,KAAKhB,MAAME,KACVZ,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,QAAMyB,SAAUD,KAAKb,WACjBb,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOC,SAAUH,KAAKH,gBAEtCvB,EAAAC,EAAAC,cAAC4B,EAAD,CAAU3B,KAAQuB,KAAKhB,MAAMP,eArCHX,aCIlCuC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SH0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f125eb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    sec : 0,\n  }\n  componentDidMount(){\n    window.setInterval(()=>{\n      this.setState(state=>({\n        sec: state.sec + 1\n      }));\n    },1000)\n  }\n  render() {\n    return (\n      <div className=\"App\" style={{\"font-size\": \"14rem\"}}>\n        {this.props.name}\n        asdfsdaf<br/>\n        {this.state.sec}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Todolist =(props)=>{\r\n    return (\r\n        <ul>\r\n            {\r\n                props.list.map((itme,index)=>{\r\n                    return (\r\n                        <li key={index}>{itme.title}</li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n    );\r\n};\r\nexport default Todolist;","import React, { Component } from 'react'\r\nimport Todolist from './Todolist'\r\n\r\nexport default class todo extends Component {\r\n    state = {\r\n        list: [\r\n            {\r\n            id: 1,\r\n            title : '할일',\r\n        },\r\n        {\r\n            id: 2,\r\n            title : '할일2'\r\n        },\r\n    ],\r\n    text:'',\r\n    }\r\n    checkTodo = (event) => {\r\n        console.log(\"111\");\r\n        const text = this.state.text;\r\n        const list = [ ... this.state.list];\r\n        list.push({\r\n            id:3,\r\n            title:text\r\n        })\r\n        this.setState({list : list})\r\n        event.preventDefault();\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({text : event.target.value});\r\n        console.log(event.target.value);\r\n    }\r\n  render() {\r\n    return (\r\n      <div>\r\n      {this.state.text}\r\n        <h1>todo</h1>\r\n        <form onSubmit={this.checkTodo}>\r\n            <input type=\"text\" onChange={this.handleChange}/>\r\n        </form>\r\n        <Todolist list = {this.state.list}></Todolist>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Todo from './todo';\n\nReactDOM.render(<Todo/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}